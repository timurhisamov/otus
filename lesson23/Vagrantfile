# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
:inetRouter => {
  :box_name => "centos/7",
  :public => {:adapter => 2, use_dhcp_assigned_default_route: true, bridge: "enp4s0"},
  :net => [
    {ip: '', adapter: 3, netmask: "", virtualbox__intnet: "router-net"},
  ]
},
:centralRouter => {
  :box_name => "centos/7",
  :net => [
    {ip: '192.168.255.5', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "router-net1"},
  ]
},
:inetRouter2 => {
  :box_name => "centos/7",
  :public => {:adapter => 2, use_dhcp_assigned_default_route: true, bridge: "enp4s0"},
  :net => [
    {ip: '192.168.255.6', adapter: 3, netmask: "255.255.255.252", virtualbox__intnet: "router-net1"},
  ]
}
}

Vagrant.configure("2") do |config|

  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http     = ENV['http_proxy']
    config.proxy.https    = ENV['https_proxy']
    config.proxy.no_proxy = ENV['no_proxy']
  end
  MACHINES.each do |boxname, boxconfig|
  config.vbguest.auto_update = false
  config.vm.box_check_update = false
  config.vm.define boxname do |box|
    box.vm.box = boxconfig[:box_name]
    box.vm.host_name = boxname.to_s
    config.vm.provider "virtualbox" do |v|
      v.memory = 256      
    end
    boxconfig[:net].each do |ipconf|
      box.vm.network "private_network", ipconf
    end
    
    if boxconfig.key?(:public)
      box.vm.network "public_network", boxconfig[:public]
    end
    box.vm.provision "shell", inline: <<-SHELL
    mkdir -p ~root/.ssh
      cp ~vagrant/.ssh/auth* ~root/.ssh
    SHELL
    
    case boxname.to_s
      when "inetRouter"
        box.vm.provision "shell", run: "always", inline: <<-SHELL
          echo "DEVICE=eth2\nBOOTPROTO=static\nBROADCAST=192.168.255.3\nIPADDR=192.168.255.1\nNETMASK=255.255.255.252\nNETWORK=192.168.255.0\nONBOOT=yes" > /etc/sysconfig/network-scripts/ifcfg-eth2
          systemctl restart network
          echo "net.ipv4.conf.all.forwarding=1" >> /etc/sysctl.conf
          sysctl -p
          echo "*filter" > /root/iptables.rules
          echo ":INPUT DROP [0:0]" >> /root/iptables.rules
          echo ":FORWARD DROP [0:0]" >> /root/iptables.rules
          echo ":OUTPUT ACCEPT [0:0]" >> /root/iptables.rules
          echo ":TRAFFIC - [0:0]" >> /root/iptables.rules
          echo ":SSH-INPUT - [0:0]" >> /root/iptables.rules
          echo ":SSH-INPUTTWO - [0:0]" >> /root/iptables.rules
          echo "# TRAFFIC chain for Port Knocking. The correct port sequence in this example is  8881 -> 7777 -> 9991; any other sequence will drop the traffic " >> /root/iptables.rules
          echo "-A INPUT -j TRAFFIC" >> /root/iptables.rules
          echo "-A TRAFFIC -p icmp --icmp-type any -j ACCEPT" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state ESTABLISHED,RELATED -j ACCEPT" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 22 -m recent --rcheck --seconds 30 --name SSH2 -j ACCEPT" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH2 --remove -j DROP" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 9991 -m recent --rcheck --name SSH1 -j SSH-INPUTTWO" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH1 --remove -j DROP" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 7777 -m recent --rcheck --name SSH0 -j SSH-INPUT" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH0 --remove -j DROP" >> /root/iptables.rules
          echo "-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 8881 -m recent --name SSH0 --set -j DROP" >> /root/iptables.rules
          echo "-A SSH-INPUT -m recent --name SSH1 --set -j DROP" >> /root/iptables.rules
          echo "-A SSH-INPUTTWO -m recent --name SSH2 --set -j DROP" >> /root/iptables.rules
          echo "-A TRAFFIC -j DROP" >> /root/iptables.rules
          echo "COMMIT" >> /root/iptables.rules
          echo "# END or further rules" >> /root/iptables.rules
      SHELL
      when "centralRouter"
        box.vm.provision "shell", run: "always", inline: <<-SHELL
          yum install epel-release -y
          yum install nmap nginx net-tools tcpdump -y
          echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0 
          systemctl restart network
          echo "DEVICE=eth1\nBOOTPROTO=static\nBROADCAST=192.168.255.3\nIPADDR=192.168.255.2\nNETMASK=255.255.255.252\nNETWORK=192.168.255.0\nONBOOT=yes\nGATEWAY=192.168.255.1\nDEFROUTE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth1
          echo "DEVICE=eth2\nBOOTPROTO=static\nBROADCAST=192.168.255.7\nIPADDR=192.168.255.5\nNETMASK=255.255.255.252\nNETWORK=192.168.255.4\nONBOOT=yes" > /etc/sysconfig/network-scripts/ifcfg-eth2
          echo "net.ipv4.conf.all.forwarding=1" >> /etc/sysctl.conf
          sysctl -p
          echo "#!/bin/bash" > /root/knock.sh
          echo "HOST=\$1" >> /root/knock.sh
          echo "shift" >> /root/knock.sh
          echo "for ARG in \"$@\"" >> /root/knock.sh
          echo "do" >> /root/knock.sh
          echo "   nmap -Pn --host_timeout 100 --max-retries 0 -p \$ARG \$HOST" >> /root/knock.sh
          echo "done" >> /root/knock.sh
          chmod +x /root/knock.sh
      SHELL
      when "inetRouter2"
        box.vm.provision "shell", run: "always", inline: <<-SHELL
          echo "net.ipv4.conf.all.forwarding=1" >> /etc/sysctl.conf
          sysctl -p
          #Проброс порта
          iptables -t nat -A PREROUTING -d 192.168.217.152 -p tcp --dport 8080 -j DNAT --to-destination 192.168.255.6:80
          iptables -t nat -A POSTROUTING -d 192.168.255.6 -p tcp --dport 80 -j SNAT --to-source 192.168.217.152
          #iptables -t nat -A POSTROUTING -o eth2 -d 192.168.255.5 -j SNAT --to-source 192.168.255.6
      SHELL
    end
  end
end
end

